
    
    
    
    
    
    
    
    
    
    
    
    
    
    [{"authors":null,"categories":null,"content":"Artificial Intelligence(AI) is one of the most emerging fields of science and engineering. Since 1956, “artificial intelligence” is created, after more than 60 years of development, AI now encompasses a wide variety of subfields, ranging from general-purpose fields such as learning and perception to specialized fields such as playing chess, proving mathematical theorems, diagnosing diseases, autonomous driving and so on, becoming a broad interdisciplinary and frontier science.\nRobin is a Engineer of artificial intelligence at the PCL AI Lab. He research interests include distributed robotics, machine learning, deep learning, computer vision.\n","date":1554595200,"expirydate":-62135596800,"kind":"term","lang":"zh","lastmod":1554595200,"objectID":"2525497d367e79493fd32b198b28f040","permalink":"","publishdate":"0001-01-01T00:00:00Z","relpermalink":"","section":"authors","summary":"Artificial Intelligence(AI) is one of the most emerging fields of science and engineering. Since 1956, “artificial intelligence” is created, after more than 60 years of development, AI now encompasses a wide variety of subfields, ranging from general-purpose fields such as learning and perception to specialized fields such as playing chess, proving mathematical theorems, diagnosing diseases, autonomous driving and so on, becoming a broad interdisciplinary and frontier science.","tags":null,"title":"Robin","type":"authors"},{"authors":["Robin"],"categories":null,"content":"使用 Hugo 搭建博客 Hugo 是用 Go 实现的博客工具，采用 Markdown 进行文章编辑，自动生成静态站点文件，支持丰富的主题配置，也可以通过 js 嵌入像是评论系统等插件，高度定制化。除了 Hugo 外， 还有 Gatsby、Jekyll、Hexo、Ghost 等选择，实现和使用都差不多，可以根据自己的偏好进行选择。\n安装 Hugo 我使用的是 macOS，所以使用官方推荐的 homebrew 方式进行 hugo 程序的安装，其他系统也类似。\nbrew install hugo 完成后，使用以下命令进行验证：\nhugo version 创建 Hugo 网站 通过上述命令安装 hugo 程序后，就可以通过 hugo new site 命令进行网站创建、配置与本地调试了。\nhugo new site robin-site Congratulations! Your new Hugo site is created in /Users/jianzhengnie/work_dir/personal_home/robin-site. Just a few more steps and you\u0026#39;re ready to go: 1. Download a theme into the same-named folder. Choose a theme from https://themes.gohugo.io/ or create your own with the \u0026#34;hugo new theme \u0026lt;THEMENAME\u0026gt;\u0026#34; command. 2. Perhaps you want to add some content. You can add single files with \u0026#34;hugo new \u0026lt;SECTIONNAME\u0026gt;/\u0026lt;FILENAME\u0026gt;.\u0026lt;FORMAT\u0026gt;\u0026#34;. 3. Start the built-in live server via \u0026#34;hugo server\u0026#34;. Visit https://gohugo.io/ for quickstart guide and full documentation. 注：后续命令未经说明，均在cmd中的robin-site根目录下运行\n创建完成后，根目录 robin-site 包含以下文件\n. ├── archetypes: default.md是生成博文的模版 ├── assets # 存放被 Hugo Pipes 处理的文件 ├── content # 存放markdown文件作为博文内容 ├── data # 存放 Hugo 处理的数据 ├── layouts # 存放布局文件 ├── static # 存放静态文件 图片 CSS JS文件 ├── themes: 存放不同的主题 └── config.toml: 博客配置文件支持 JSON YAML TOML 三种格式配置文件 配置主题 当通过上文命令创建我们的站点后，需要进行主题配置，Hugo 社区有了很丰富的主题，可以通过官网 Themes 菜单选择自己喜欢的风格，查看预览效果，选择后可以进入主题项目仓库，一般都会有很详细的安装及配置说明。\n官方主题网站: https://themes.gohugo.io/\n主题推荐:\nPure: https://themes.gohugo.io/hugo-theme-pure/ 关联主题仓库 我们可以将主题仓库直接 git clone 下来进行使用，例如在根目录robin-site下运行以下代码，即可下载pure主题.\ngit clone https://github.com/xiaoheiAh/hugo-theme-pure themes/pure 这种方式有一些弊端，当之后自己对主题进行修改后，可能会与原主题产生一些冲突，不方便版本管理与后续更新。官方更推荐使用的是将原主题仓库 fork 到自己的账户，并使用 git submodule 方式进行仓库链接，这样后续可以对主题的修改进行单独维护。\ncd robin-site/ git init git submodule add https://github.com/pseudoyu/pure themes/pure 然后在根目录下的 config.toml文件中添加新的一行:\ntheme = \u0026#34;pure\u0026#34; 更新主题 如果是 clone 了其他人的博客项目进行修改，则需要用以下命令进行初始化：\ngit submodule update --init --recursive 如果需要同步主题仓库的最新修改，需要运行以下命令：\ngit submodule update --remote 新建博文 完成后，可以通过 hugo new 命令发布新文章。\nhugo new posts/test.md --- title: \u0026#34;Test\u0026#34; date: 2022-10-21T19:00:43+08:00 draft: true --- 这个命令会在 content 目录下建立 post 目录，并在 post 下生成 test.md 文件，博文书写就在这个文件里使用 Markdown 语法完成。博文的 front matter 里draft 选项默认为 true，需要改为 false 才能发表博文，建议直接更改上面说的archetypes 目录下的 default 文件，把 draft: true 改为 draft: false，这样生成的博文就是默认可以发表的。\n生成网页 为了查看生成的博客的效果，我们在本地编辑调试时可以通过 hugo server 命令进行本地实时调试预览，无须每次都重新生成。在cmd中运行以下命令，即我们可以通过浏览器 http://localhost:1313/ 地址访问我们的本地预览网页。\nhugo server -D 但此时只能在本地访问，如果想发布到 Github Pages ， 还需要借助 GithubPages 工具。\n配置文件 打开配置config.toml可以看到很多的参数可以配置，这里只描述最基本的内容，不同的主题可能会支持不同的参数配置，具体请看对应主题的说明文档。baseURL是站点的域名。title是站点的名称。theme是站点的主题。还有关于评论和打赏的相关配置，这些配置都可以参考官网主题的说明。\n每次发布的时候，都需要先执行hugo，把新写的文档按照主题进行渲染，所有生成的文件默认都在当前pulic的子目录下，可以在config里面配置到其他目录。然后把所有新的文件提交到github。提交代码之后，要等一段时间才生效。\nGitHub Pages 发布博客 我们希望 Hugo 生成的静态网站能通过 GitHub Pages 服务进行托管，而无需自己维护服务，更稳定、安全，因此我们需要上传 Hugo 生成的静态网页文件至 GitHub Page 项目仓库。\nGithub Pages 到底是在做什么？ A：Github Pages 本质上是一个静态网站托管系统，你可以使用它为你的每一个仓库制作一个静态网页入口。\n它有两种存在方式：\n识别 master branch 根目录下的：README.md 或者 index.html 识别 master branch 的 /docs 目录下的：README.md 或者 index.html 也就是说：我们可以把我们的静态网页直接存在 master branch，并在 Github Repository 的 Setting 页中打开 Github Pages 选项，就可以通过一个域名访问到我们的想要的网站了。\n实战操作：部署 Hugo 作为一个 Github Pages 将 Hugo 部署为 Github Pages 项目，并使用简单的 shell 脚本自动化整个过程\n第一步： 创建一个 Github 仓库\n登录后，点击右上角，出现下拉菜单，点击 Your repositories 进入页面 点击 New 进入 Creat a new repository 页面 Repository name 这里一定要填 [你的github帳號].github.io，像我的帳號是 jianzhnie，所以我就要輸入 jianzhnie.github.io，然後按 [Create Repository] 。 第二步：创建新文章\nhugo new posts/my-first-post.md 这里面值得注意的是，通过上述命令行创建的文章中，会自动生成一部分文本如下：\n--- title: \u0026#34;My First Post\u0026#34; date: 2019-03-26T08:47:11+01:00 draft: true --- 我们需要把 draft : true 修改成 draft : false 才可以上传这篇文章\n第三步：修改配置文件 config.toml\n站点目录**config.toml中baseURL**要换成自己建立的仓库，如baseURL = “https://jianzhnie.github.io/\u0026#34;\n第四步： 进入站点根目录下，执行：\nhugo 执行后，站点根目录下会生成一个 public 文件夹，该文件下的内容即Hugo生成的整个静态网站。每次更新内容后，将 pubilc 目录里所有文件 push到GitHub即可。\n第五步：上传代码至 master\n首次使用的时候要执行以下命令：\ncd public git init git remote add origin https://github.com/jianzhnie/jianzhnie.github.io.git # 将本地目录链接到远程服务器的代码仓库 git add . git commit -m \u0026#34;[介绍，随便写点什么，比如日期]\u0026#34; git push -u origin master 稍等几分钟即可通过我们的自定义域名来访问我们的博客站点了，和我们 hugo server 本地调试完全一致。\n以后每次站点目录下执行 hugo 命令后，再到public下执行推送命令：\ngit add -A git commit -m \u0026#34;[介绍，随便写点什么，比如日期]\u0026#34; git push -u origin master 用 Github 的 gh-pages 分支展示自己的项目 上根据上面的教程， 我们可以 创建个人的博客网站，如 https://jianzhnie.github.io, 这个网站一般是作为个人博客或者学术主页，如果我们还有其他项目需要展示， 如项目文档，产品文档，学习笔记等， 那这个主页就不够用了。\n下面介绍一种解决方案，用 Github 的 gh-pages 分支展示自己的项目。Github创建项目仓库后随即只产生一个master分支，只需要再添加gh-pages分支就可以创建静态页面了。这利用了项目站点（即Project Pages）的方式。\n下面通过一个例子来说明 gh-pages 的使用：\n第一步： 创建一个 Github 仓库\n例如新建一个 deeplearning-notes 的仓库，主要用于记录深度学习的笔记， GitHub 地址： https://github.com/jianzhnie/deeplearning-notes 第二步， 同样的参考上面搭建网站的方式, 新建一个网站：\nhugo new site project 第三步， 新建一篇笔记：\nhugo new posts/deeplearning.md 第四步：修改配置文件 config.toml\n站点目录**config.toml中baseURL**要换成自己建立的仓库，如baseURL = “https://jianzhnie.github.io/deeplearning-notes/\u0026#34;\n第五步： 进入站点根目录下，执行：\nhugo 执行后，站点根目录下会生成一个 public 文件夹，该文件下的内容即Hugo生成的整个 …","date":1666396800,"expirydate":-62135596800,"kind":"page","lang":"zh","lastmod":1666396800,"objectID":"54648b625c8800a7ff275ab18d735d30","permalink":"https://jianzhnie.github.io/post/hugo_site/","publishdate":"2022-10-22T00:00:00Z","relpermalink":"/post/hugo_site/","section":"post","summary":"使用 Hugo 搭建博客 Hugo 是用 Go 实现的博客工具，采用 Markdown 进行文章编辑，自","tags":["hugo","Site"],"title":"Hugo + Github Pages 搭建个人博客","type":"post"},{"authors":["Robin"],"categories":null,"content":" 将序列比对到nt、nr、uniprot、pfam等数据库是常有的事，blast无疑是最常用的比对软件，但是它的速度一直提不起来，非常耗费时间。估计比对等不到blast的结果了，于是想到了另一款软件Diamond\nDiamond简介 序列比对软件，能输出与BLAST类似的结果，但是速度快了数百倍。\n对于长序列，支持Frameshift alignments；\n占用资源更少，但只是相对blast来讲；\n自定义多种输出格式\n记得引用：\nBuchfink B, Xie C, Huson DH, “Fast and sensitive protein alignment using DIAMOND”, Nature Methods 12, 59-60 (2015). doi:10.1038/nmeth.3176\nDiamond使用 还是conda安装好diamond，说明书在此：https://github.com/bbuchfink/diamond/raw/master/diamond_manual.pdf\n第一步: 准备数据集 先从NCBI上下载蛋白数据库。 NR库是NCBI的非冗余蛋白数据库，\nwget ftp://ftp.ncbi.nlm.nih.gov/blast/db/FASTA/nr.gz gunzip nr.gz 第二步: 建库 就两个参数，--in nr输入文件，--db nr 输出的数据库前缀\ndiamond makedb --in nr.faa -db nr -p 20 最近下载了一个nr数据库，解压完是110G，命名为nr.faa.\n结果会生成一个nr.dmnd的索引文件\n我用了20核构建了110G的nr数据库，用时5726.56s，作为参考\nPfam数据库7.1G，24核用时190.931s，还是非常快的\n附带数据库下载地址：\nNr：http://mirrors.vbi.vt.edu/mirrors/ftp.ncbi.nih.gov/blast/db/FASTA/nr.gz\nPfam：ftp://ftp.ebi.ac.uk/pub/databases/Pfam/releases/Pfam32.0/Pfam-A.fasta.gz\nUniprot: ftp://ftp.uniprot.org/pub/databases/uniprot/current_release/knowledgebase/complete/uniprot_sprot.fasta.gz\n第三步: 搜索 就两个子命令，blastp和blastx，前者比对蛋白，后者比对DNA序列\n# 因为要将核酸序列比对到蛋白库，因此使用blastx功能 diamond blastx -d nr -q reads.fna -o nr.matches 默认输出格式是BLAST的tab结果，-o指定输出文件名\n-q/ –query输入检索序列 –out/ -o输出文件，默认以–outfmt 6输出结果和BLAST+的–outfmt 6结果一致。 需要注意的是：\n这个过程需要消耗大量的内存与硬盘（用于存放临时文件），如果资源不够，可以设置-b参数调整 默认的比对模式（fast模式）是针对短序列的，如果要比对的序列比较长，建议使用sensitive模式，设置—sensitive或者--more-sensitive 运行时间不与比对文件大小成正比，相反，文件越大（比如大于1M reads）比对速度越快 比对结果中的X表示Masked residues 默认的阈值是0.001而Blast是10，相比之下，diamond比对更严格，得到的weak hits会更少 ","date":1649808000,"expirydate":-62135596800,"kind":"page","lang":"zh","lastmod":1649808000,"objectID":"61ad0f0373e62925bdb990a4c252cc61","permalink":"https://jianzhnie.github.io/post/diamond/","publishdate":"2022-04-13T00:00:00Z","relpermalink":"/post/diamond/","section":"post","summary":"将序列比对到nt、nr、uniprot、pfam等数据库是常","tags":["生信"],"title":"Diamond","type":"post"},{"authors":["Robin"],"categories":null,"content":"GO数据库： 官网及详细说明：http://geneontology.org/docs/download-ontology/ 具体GO数据库的搭建参考Blast2go文章详解\nKegg数据库： KEGG（Kyoto Encyclopedia of Genes and Genomes）京都基因和基因组百科全书，是研究Pathway代谢通路的最主要数据库，整合了基因组信息、化学信息、系统信息及疾病和健康信息。\nUniProt 数据库： Unified Protein Database（简称UniProt）是信息最丰富、资源最广的蛋白质序列数据库，含蛋白质序列，功能信息，研究论文索引等信息, 整合了包括EBI（ European Bioinformatics Institute），SIB（the Swiss Institute of Bioinformatics），PIR（Protein Information Resource）三大数据库的资源。\nEBI（ European Bioinformatics Institute）：\n欧洲生物信息学研究所（EMBL-EBI）是欧洲生命科学旗舰实验室EMBL的一部分。位于英国剑桥欣克斯顿的惠康基因组校内，是世界上基因组学领域最强的存在之一。\nSIB（the Swiss Institute of Bioinformatics）：\n瑞士日内瓦的SIB维护着ExPASy（专家蛋白质分析系统）服务器，这里包含有蛋白质组学工具和数据库的主要资源。\nPIR（Protein Information Resource）：\nPIR是美国国家生物医学研究基金会（NBRF）于1984年创立，旨在协助研究人员识别和解释蛋白质序列信息。\nUniprot数据库主要子数据库组成：\n以上子数据库间的关系如下：Uniprot会收集EMBL，GenBank，DDBJ等公共数据库中的蛋白质序列及功能信息等原始数据，处理后存入UniParc的非冗余蛋白质序列数据库；UniPrc作为数据仓库，再分别给UniProtKB，Proteomes，UNIRef提供可靠的数据集，其中在UniProtKB数据库中Swiss-Prot是由TrEMBL经过手动注释后得到的高质量非冗余数据库，也是我们最常用的蛋白质数据库之一。\nUniprot数据库官方链接：https://www.uniprot.org/\nUniProtKB/Swiss-Prot 高质量的、手工注释的、非冗余的数据集\nSwiss-Prot旨在提供与高水平注释（例如，蛋白质功能，其域结构，翻译后修饰，变体等的描述）相关的可靠蛋白质序列，最小程度的冗余和高水平与其他数据库的集成级别。注释主要来自文献中的研究成果和E-value校验过计算分析结果，有质量保证的数据才被加入该数据库 。\nSwiss-Prot由Amos Bairoch博士在1986年创建，由瑞士生物信息学研究所开发，随后由欧洲生物信息学研究所的Rolf Apweiler开发。也是说EBI和SIB共同制作了Swiss-Prot和TrEMBL数据库。\nSwiss-Prot条目的注释中使用了一系列序列分析工具。包括手动评估，计算机预测，并选择结果包含在相应的条目中。这些预测包括翻译后修饰，跨膜结构域和拓扑，信号肽，结构域识别和蛋白质家族分类。\n来自相同基因和相同物种的序列合并到相同的数据库条目中。确定序列之间的差异包含：可变剪接，自然变异，错误的起始位点，错误的外显子边界，移码，未识别的冲突。\n注释会用相关出版物通过搜索数据库（例如PubMed）进行识别。阅读每篇论文的全文，然后提取信息并将其添加到条目中。科学文献中的注释包括但不限于：\n蛋白质和基因名称 功能 特定于酶的信息，例如催化活性，辅因子和催化残基 亚细胞定位 蛋白质相互作用 表达方式 重要域和站点的位置和角色 离子，底物和辅因子结合位点 通过自然遗传变异，RNA编辑，替代剪接，蛋白水解加工和翻译后修饰产生的蛋白质变异形式 常用的操作 \u0026lt;1\u0026gt;：这里输入基因名，UniProt ID，或者感兴趣的关键字\n\u0026lt;2\u0026gt;：筛选：Reviewed：存储在Swiss-Prot数据库中经过验证的蛋白数据，Unreviewed：存储在TrEMBL数据库中没有经过验证的蛋白数据\n\u0026lt;3\u0026gt;：筛选某个物种，点击就好切换到该物种\n\u0026lt;4\u0026gt;：通过基因名或蛋白名来筛选\n\u0026lt;5\u0026gt;：依次是Unprot ID，该蛋白数据库命名，蛋白质名，基因名，物种，序列长\n\u0026lt;6\u0026gt;：如果需要Blast来查看某个蛋白有哪些序列相似的蛋白序列，先选中感兴趣蛋白前的方框，点击Blast\n\u0026lt;7\u0026gt;：如果需要多序列比对，先选中感兴趣蛋白前的方框，点击Align\n\u0026lt;8\u0026gt;：如果要下载信息，先选中感兴趣蛋白前的方框，点击Download下载。这里不选择序列，默认会下载全部序列\n下面以 PO5F1_HUMAN 为例，下载对应的fasta序列来看看：\n下载到的序列：\n\u0026gt;sp|Q01860|PO5F1_HUMAN POU domain, class 5, transcription factor 1 OS=Homo sapiens OX=9606 GN=POU5F1 PE=1 SV=1 MAGHLASDFAFSPPPGGGGDGPGGPEPGWVDPRTWLSFQGPPGGPGIGPGVGPGSEVWGI PPCPPPYEFCGGMAYCGPQVGVGLVPQGGLETSQPEGEAGVGVESNSDGASPEPCTVTPG AVKLEKEKLEQNPEESQDIKALQKELEQFAKLLKQKRITLGYTQADVGLTLGVLFGKVFS QTTICRFEALQLSFKNMCKLRPLLQKWVEEADNNENLQEICKAETLVQARKRKRTSIENR VRGNLENLFLQCPKPTLQQISHIAQQLGLEKDVVRVWFCNRRQKGKRSSSDYAQREDFEA AGSPFSGGPVSFPLAPGPHFGTPGYGSPHFTALYSSVPFPEGEAFPPVSVTTLGSPMHSN 首先看 \u0026gt; 后的注释信息\nsp：Swiss-Prot数据库的简称，也就是上面说的验证后的蛋白数据库\nQ01860：UniProt ID号\nPO5F1_HUMAN：是UniProt 的登录名\nPOU domain, class 5, transcription factor 1：蛋白质名称\nOS=Homo sapiens：OS是Organism简称，Homo sapiens为人的拉丁文分类命名，也就是这是人的蛋白质\nOX=9606：Organism Taxonomy，也就是物种分类数据库Taxonomy ID\nGN=POU5F1：Gene name，基因名为POU5F1\nPE=1：Protein Existence，蛋白质可靠性，对应5个数字，数字越小越可靠：\n1：Experimental evidence at protein level 2：Experimental evidence at tranlevel 3：Protein inferred from homology 4：Protein predicted 5：Protein uncertain SV=1：Sequence Version，序列版本号\nUniProtKB/TrEMBL 在认识到序列数据的生成速度超过了Swiss-Prot的注释能力时，为了给不在Swiss-Prot中的那些蛋白质提供自动注释，UniProt创建了TrEMBL（翻译的EMBL核苷酸序列数据库）。在三大核酸数据库（EMBL-Bank/GenBank/DDBJ）中注释的编码序列都会被自动翻译并加入该数据库中。它也有来自PDB数据库的序列，以及Ensembl、Refeq和CCDS基因预测的序列。之前提到的PIR组织制作了蛋白质序列数据库（PIR-PSD）。\nUniParc UniProt Archive（UniParc）包含来自主要公共可用蛋白质序列数据库的所有蛋白质序列的非冗余数据集。蛋白质可能存在于几个不同的来源数据库中，并且在同一数据库中存在多个副本。 为了避免冗余，UniParc仅将每个唯一序列存储一次。 相同序列被合并，无论它们来自相同还是不同物种。 每个序列都有一个稳定且唯一的标识符（UPI），从而可以从不同的来源数据库中识别相同的蛋白质。\nUniParc仅包含蛋白质序列，没有注释。 UniParc条目中的数据库交叉引用允许从源数据库检索有关该蛋白质的更多信息。 当源数据库中的序列发生更改时，UniParc将跟踪这些更改，并记录所有更改的历史记录。\nUniRef UniProt Reference Clusters（UniRef）：聚类序列可显著减小数据库大小，从而加快序列搜索的速度。用于计算的蛋白质序列来自UniProtKB和部分UniParc记录的序列。UniRef100序列将相同的序列和序列片段（来自任何生物）合并到一个UniRef条目中，用于显示代表性蛋白质的序列。 使用CD-HIT算法对UniRef100序列进行聚类，并构建UniRef90和UniRef50。UniRef90和UniRef50分别代表每个簇由与最长序列分别具有至少90％或50％序列同一性的序列组成。\nCOG直系同源蛋白数据库： COG (蛋白质直系同源簇) 数据库是 NCBI 开发的用于同源蛋白注释的数据库，是将细菌、藻类和真核生物的21个完整基因组的编码蛋白，根据系统进化关系分类构建而成。通过鉴定蛋白与数据库的比对，可以很好的预测蛋白质的功能。\nwget -c ftp://ftp.ncbi.nih.gov/pub/COG/COG2014/data/* fun2003-2014.tab 保存了COG的分类信息，将所有的COG的功能分为了以下26个类别，每个类别用一个字母表示\ncognames2003-2014.tab 文件保存了COG的详细信息，包括编号，对应的分类，功能描述等信息\ncog2003-2014.csv 文件保存了蛋白和COG的对应关系\nprot2003-2014.fa.gz 保存了fasta格式的蛋白序列和注释信息，直接对蛋白序列文件构建索引blast比对。示例如下\n\u0026gt;gi|103485499|ref|YP_615060.1| chromosomal replication initiation protein [Sphingopyxis alaskensis RB2256] MSGDAAALWPRVAEGLRRDLGARTFDHWLKPVRFADYCALSGVVTLETASRFSANWINERFGDRLELAWRQQLPAVRSVS VRGGVAATERAATLASVPLPTFDAPAAPAANPALLGFDP RLSFDRFVVARSNILAANAARRMAMVERPQFNPLYLCSGTG QGKTHLLQAIAQDYAAAHPTATIILMSAEKFMLEFVGAMRGGDMMAFKARLRAADLLLLDDLQFVIGKNSTQEELLHT ID DLMTAGKRLVVTADRPPAMLDGVEARLLSRLSGGLVADIEAPEDDLRERIIRQRLAAMPMVEVPDDVIAWLVKHFTRNIR ELEGALNKLLAYAALTGARIDLMLAEDRLAENVRSA RPRITIDEIQRAVCAHYRLDRSDMSSKRRVRAVARPRQVAMYLA KELTPRSYPEIGRRFGGRDHSTVIHAVRTVEALRVADSELDAEIAAIRRSLNS KOG数据库： “KOG”是Clusters of orthologous groups for eukaryotic complete genomes（真核生物蛋白相邻类的聚簇）的缩写。构成每个KOG的蛋白都是被假定为来自于一个祖先蛋白，并且因此或者是orthologs或者是paralogs。Orthologs是指来自于不同 …","date":1649808000,"expirydate":-62135596800,"kind":"page","lang":"zh","lastmod":1649808000,"objectID":"8d407fd7b6aec6ec262886f8c7005b35","permalink":"https://jianzhnie.github.io/post/protein%E6%95%B0%E6%8D%AE%E4%BB%8B%E7%BB%8D/","publishdate":"2022-04-13T00:00:00Z","relpermalink":"/post/protein%E6%95%B0%E6%8D%AE%E4%BB%8B%E7%BB%8D/","section":"post","summary":"GO数据库： 官网及详细说明：http://geneontol","tags":["Protein 数据库"],"title":"Protein 数据库","type":"post"},{"authors":["Robin"],"categories":null,"content":"GO的obo文件解析Python代码 介绍：\n在现在的组学研究中几乎离不开GO分析，那么GO是干什么的呢，GO的诞生主要目的是来归类统一生物学方言的（不同的生物学数据库可能会使用不同的术语），它是一个有向无环图（DAG）本体,主要形式是一term标记，每个GO term代表一种功能描述，都属于ontology.\n而GO总共分成三个ontology:molecular function, cellular component 和biological process；\n在GO中GO term之间存在多种关系，常见的主要是 is_a 和 part_o f和两种关系，\nis_a：表示包含关系，如图中黑色箭头，需要强调的是“完全包含”； Part_of：表示一部分，如图蓝色箭头部分，简单的来说是A part_of_B意味着如果A出现，那么它就肯定是B的一部分或组成部分，但A不一定总会出现。比如叶绿体 part_of 细胞，叶绿体肯定是细胞的一部分，但有的细胞没有叶绿体。 使用：\n了解GO之后，怎么使用它是一个永远的话题，比如手头有一个基因序列但不知道它的功能，那么经常的做法是会进行GO注释，从 GO注释中来推断这个基因序列的功能，这篇文章主要是来分享一下对于GO的obo文件的解析的，obo文件是用来存储所有GO term关系的文件。\n#encoding:utf-8 \u0026#39;\u0026#39;\u0026#39; Created on 2017.5.29 @author: zhura \u0026#39;\u0026#39;\u0026#39; class GOBase(object): def __init__(self,_id): self._id=_id self.alt_ids=[] self.name=\u0026#39;\u0026#39; self.namespace=\u0026#39;\u0026#39; self.parent=None self.level=-1 self.allParents=None class ObOs(object): def __init__(self,path): self.path=path self.map={} self.parseObO() def parseObO(self): f=open(self.path) lines=f.readlines() f.close() _goTxt=[] flag=False for line in lines: line=line.rstrip(\u0026#39;\\n\u0026#39;).strip() if flag: _goTxt.append(line) if flag and line==\u0026#39;\u0026#39;: self.parseGO(_goTxt) _goTxt=[] flag=False if line.find(\u0026#39;[Term]\u0026#39;)==0: flag=True def parseGO(self,_goText): _id=None _name=\u0026#39;\u0026#39; _namespace=\u0026#39;\u0026#39; _is_as=[] _alt_ids=[] for _txt in _goText: if _txt.find(\u0026#39;id:\u0026#39;)==0: _id=_txt[_txt.find(\u0026#39;GO\u0026#39;):_txt.find(\u0026#39;GO\u0026#39;)+10] elif _txt.find(\u0026#39;name:\u0026#39;)==0: _name=_txt[5:len(_txt)].rstrip().lstrip() elif _txt.find(\u0026#39;namespace:\u0026#39;)==0: _namespace=_txt[10:len(_txt)].rstrip().lstrip() elif _txt.find(\u0026#39;alt_id:\u0026#39;)==0: _alt_ids.append(_txt[_txt.find(\u0026#39;GO\u0026#39;):_txt.find(\u0026#39;GO\u0026#39;)+10]) elif _txt.find(\u0026#39;is_a:\u0026#39;)==0 or _txt.find(\u0026#39;relationship:\u0026#39;)==0: _is_as.append(_txt[_txt.find(\u0026#39;GO\u0026#39;):_txt.find(\u0026#39;GO\u0026#39;)+10]) if _id: _go=None if self.map.has_key(_id): _go=self.map[_id] else: _go=GOBase(_id) _go.name=_name _go.namespace=_namespace _go.parent=self.parseParent(_is_as) _go.alt_ids=_alt_ids self.map[_id]=_go if len(_alt_ids)\u0026gt;0: for _alt in _alt_ids: self.map[_alt]=_go def parseParent(self,is_as): __parent=[] for isa in is_as: if not self.map.has_key(isa): cGo=GOBase(isa) self.map[isa]=cGo __parent.append(isa) return __parent def getLevel(self,_id): _min=100000 _go=self.map[_id] if _go.level\u0026gt;0: pass elif len(_go.parent)==0: _go.level=1 else: for g in _go.parent: lev=self.getLevel(g) if _min\u0026gt;lev: _min=lev _go.level=_min+1 return _go.level def getAllParent(self,_id): _prs=[_id] _go=self.map[_id] if not _go.allParents is None: return _go.allParents if _go.parent is None or len(_go.parent)==0: _go.allParents=_prs return _go.allParents for g in _go.parent: ap=self.getAllParent(g) _prs.extend(ap) _go.allParents=list(set(_prs)) return _go.allParents if __name__ == \u0026#39;__main__\u0026#39;: obo=\u0026#39;D:/bgDB/go-basic.obo.txt\u0026#39; ob=ObOs(obo) print ob.getAllParent(\u0026#39;GO:0004322\u0026#39;) print ob.getLevel(\u0026#39;GO:0004322\u0026#39;) print ob.getLevel(\u0026#39;GO:0003824\u0026#39;) ","date":1649808000,"expirydate":-62135596800,"kind":"page","lang":"zh","lastmod":1649808000,"objectID":"8414e54ec5ee85ad6ba378bac5e60ac2","permalink":"https://jianzhnie.github.io/post/python-%E8%A7%A3%E6%9E%90go%E7%9A%84obo%E6%96%87%E4%BB%B6/","publishdate":"2022-04-13T00:00:00Z","relpermalink":"/post/python-%E8%A7%A3%E6%9E%90go%E7%9A%84obo%E6%96%87%E4%BB%B6/","section":"post","summary":"GO的obo文件解析Python代码 介绍： 在现在的组学研究中","tags":["Python"],"title":"Python 解析go的obo文件","type":"post"},{"authors":["Robin"],"categories":null,"content":"肠道菌群，作为寄居在人体肠道内微生物群落的总称，是近年来微生物学、医学、基因学等领域最引人关注的研究焦点之一。 近年来的研究逐渐揭示了肠道菌群的构成、数量、如何进入人体、如何辅助消化、如何影响肠道发育，以及肠道菌群失衡如何影响整体健康。 但肠道菌群如此庞大，与人体的交互关系如此复杂，关于肠道菌群仍有诸多悬而未解的难题。无外乎很多科学家将其称为人体的另一个器官，甚至“另一个你”。\n人类的胃肠内有数万亿个微生物，包括细菌、真菌和病毒。它们大多分布在大肠中，数量大致与全身的细胞数相当。在人体肠道细菌中，只有10%到20%的细菌是与他人相同的。\n左上）双歧杆菌，（右上）乳酸杆菌，（左下）肠球菌，（右下）大肠杆菌\n肠道菌群是什么？ 这里有三个关键词，肠道、菌、群。 研究微生物的科学家，给了一个通俗易懂的定义——生存在人的肠道里的大量细菌构成的集体，就叫做肠道菌群。 这家伙并不是人与生俱来的。胎儿在子宫里是处于无菌状态的，但胎儿出生后，伴随第一口呼吸、第一口乳液、第一嘴辅食，肠道菌群的始祖们，也随着食物、空气、水进入肠道并安营扎寨，不断壮大队伍，扩充地盘，最终形成稳定的菌群构成。\n肠道菌群有什么？ 前面说了，肠道菌群构成复杂，细菌种类繁多，但还是能划分为三种类型。 第一种是共生菌群，主要有拟杆菌、梭菌、双歧杆菌、乳酸杆菌。这几个名很熟悉吧，现在各类产品中铺天盖地的益生菌，说的就是后两者，有很多益生元或益生素就是用于补充或者刺激双歧杆菌的生长。 这些细菌势力最为庞大，占到了肠道菌群的99%以上，跟人形成良好的合作关系，辅助消化多种食物，并保护我们的肠道。 第二种是条件致病菌群，主要有肠球菌、肠杆菌等。这些家伙数量不多，但属于肠道里的不稳定因素。肠道健康时，共生菌群占压倒性优势，条件致病菌群就很安分；但要是共生菌群被破坏了，这些家伙就会引发多种肠道疾病。 第三种是致病菌群，比如沙门氏菌、致病大肠杆菌等。它们是健康的破坏者，本不属于肠道，但一旦误食进入肠道，就会兴风作浪，导致腹泻、食物中毒等。\n肠道菌群都干些什么？ 肠道菌群，或者说共生菌群，不是住在你的肠道白吃白喝的，它与你的健康休戚相关。 首先，也是最重要的，帮你吃饭。 人是所有生物中饮食最复杂的，肉、菜、谷物，无所不食。但吃是一码事，消化吸收是另一码事。人最主要的消化器官就是肠道，但面对如此繁多的食物，纵使肠道有三头六臂，也处理不了这么繁重的工作。 于是在人类漫长的进化史中，肠道请来了帮手——共生菌群。肠道为它们提供天然的厌氧环境作为住所；后者特别擅长分解复杂纤维和多糖，把得到的葡萄糖、维生素、脂肪、微量元素，作为房租交给肠道，供人体吸收。两者各取所取，有饭一起吃，有钱一起赚。 其次，保护你的健康。 一方面，大量的菌群黏附在肠壁上，为肠道穿上了一层天然的铠甲，避免肠壁与有害物质直接接触。另一方面，共生菌群会与肠道的免疫系统形成互动，刺激后者的发育，使肠道应对致病微生物的“反导系统”更加强大。 此外，共生菌群还会直接上阵，帮助消灭致病菌。 因为共生菌群与致病菌群都以肠道为生存环境，致病菌的入侵，直接侵占了共生菌群的地盘。面对这种情形，占绝对优势的共生菌自然不会答应，第一时间就会通过“菌数”优势，压制致病菌势力，在保护自己家园的同时，也保护人体的健康。 再者，调节你的生理。 正常的肠道菌群，为了改善自己的居住环境，也就是你的肠道，会将分解的短链脂肪酸滋养肠壁细胞，促进肠壁细胞的生长和更替，还能促进肠壁分泌更多的消化酶。 同时，它们还能调节肠粘膜的生长，让受损的肠粘膜更快的得到修复——自家房子漏雨的还不赶快修呀。除此之外，肠道菌群能产生类胡萝卜素类物质，降低动脉硬化和中风的风险；还能通过跟淋巴系统谈判，降低对食物的过敏反应。更为神奇的是，最新的研究成果表明，肠道菌群能根据对它对食物的喜好，调节你的生理和心理状态。\n通过饮食改变、药物、甚至锻炼，人类的微生物组可能很快发生改变。因此，通过仔细检查肠道，我们能够发现疾病出现和扩散的迹象，这对于改善我们的健康状况，甚至延长寿命都至关重要。\n借助科学研究领域的人工智能和机器学习，科学家尽可能多地采集人的微生物学特征，以了解发生疾病变化的表征。研究者也可通过操纵生物群系，找到抵御、甚至治愈疾病的方法。\n如果我们认为每个微生物组都不同，则可根据个体基因突变和生物组成对症下药。据此，研究者正在从简单的诊断向预防医学和个人医学转变。\n预测性： 研究认为，在发病或病情发展之前的几个月、甚至是几年内，人类的微生物组都有可能发生变化。但饮食、压力、锻炼和其他因素也可以改变微生物组。医学科学家正在努力了解哪些变化是由于生活方式的不同，又有哪些变化表示疾病的出现。检测健康人体的微生物组，提供基线指标，借此分析这段时间内的变化。 预防性： 研究者正在寻找填充人体系统及其活动的微生物类型，以找到抵御糖尿病、癌症和痴呆症等疾病的建议。研究者希望将基因数据与微生物组数据相结合，以提供预防性护理。 个性化： 直至今日，基于人体独特生物学特点的“个性化”或“精确”治疗主要依赖家族史和 DNA 分析。研究者希望通过微生物组包含的数据做出更为准确的治疗选择。 在每个人的生物群系中检测数百万亿微生物，分析速度可能比预期速度慢。通过改进后的、高级计算机系统（采用 Micron 美光内存设备）支持的人工智能技术，研究者可在几分钟内完成数年的人力工作（人力工作也并不一定能成功完成）。\n为了使该样本分析更有意义，科学家需要数据库的辅助。美国国家卫生研究院的“我们所有人”计划旨在采集 100 多万人的数据，包括微生物组采样数据，以有助于更准确的医疗用途。美国国家卫生研究院的“人类微生物组计划”（已停止）开展了许多关于肠道菌群对人类各方面健康作用的研究。目前很多其他项目正在进行中，希望可以实现以下目标：\n改善免疫系统。 将微生物组看作免疫系统调节剂的这一观点已被广泛接受。从婴儿时期开始，肠道中的细菌就开始教我们的免疫系统“如何好好表现”（引用 ScienceNordic 中的一篇文章）。这些生物也会影响消化道和其他器官的炎症情况。 预防霍乱。 来自杜克大学、麻省综合医院和孟加拉国达卡国际腹泻病研究中心的研究者正在通过机器学习算法检测消化系统中的细菌群落活动模式 - 人类通过肉眼基本无法看到这些活动。由于并非所有接触霍乱的人都患上腹泻疾病，因此人工智能可以帮助研究人员了解其被研究者是否有风险及其原因。其还有助于疫苗的开发。 药物相互作用。 根据美国国家医学图书馆摘要，我们认为微生物组的组成影响药物治疗的反应，以及某些药物的代谢程度。 老化。 微生物组对健康老化的作用是加州大学圣地亚哥分校和 IBM 研究院的健康生活人工智能中心的研究重点之一。该中心研究遗传学、环境因素、日常生活习惯和人类微生物组对老年人认知能力的影响。现已证实，帕金森病和其他老龄疾病都与微生物组有关。该中心采用人工智能技术，筛选并分析抽样中提供的大量数据。 肠道微生物组的应用前景 最近的一项创新的研究性疗法是将粪便微生物群移植，并已经在临床试验中进行了测试，非常具有治疗前景。 在过去的5年里，CAS 内容合集每年收录约1000余篇与粪便移植相关的文献。 例如，据报道，粪便微生物群移植能够解决 80-90% 由对抗生素无反应的复发性艰难梭菌引起的感染。 粪便微生物群移植作为一系列疾病的潜在治疗手段急待探究，其临床试验的独特作用也正被越来越多地研究。 目前，通过胃肠道微生物群调节肠脑轴的研究是一门新兴的创新前沿科学。 大部分可用数据是基于基础科学或动物模型，可能无法适用于有效的人类干预。 因此，特定的益生元化合物和益生菌的个体化处方，代表了理想的、个性化的营养方式和生活方式。 人们仍然对个体化处方充满希望。正在进行的进一步确定微生物组的功能和宿主-微生物的互作机制的努力，将使人们更好地了解微生物组在健康和疾病中的作用。\n与致癌菌斗争到底 ① 肠道微生物可产生破坏DNA的毒素以及致癌物质，引起促癌炎症反应，使肿瘤对化疗药物产生抗性，并抑制人体的抗癌免疫反应；② 常见的致癌菌有：引起胃癌的幽门螺旋杆菌，引起肠癌的特定脆弱拟杆菌和大肠杆菌菌株以及具核梭杆菌；③ 可发展针对特定致癌菌的药物、疫苗或噬菌体，在杀灭致癌菌的同时不影响有益菌；④ 粪菌移植安全性尚存疑，与直接采用捐赠者粪菌相比，移植经过设计的菌群更安全；⑤ 微生物疗法也需针对特定肿瘤类型进行定制。\n工程菌有望成为新的活体疗法 ① 利用合成生物学，单菌的定制改造已经初步实现，现在研究者希望实现工程菌多功能化，尤其是其检测性及对内环境的监测性；② 由工程菌和天然菌组成的关键菌群群落的定制和移植，是一种可以实现的、更好的方式，其困难在于菌落间的相互作用及其功能实现；③ 基于群体感应原理，工程菌的应用需要结合合成生物学与合成生态学观点；④ 鉴于肠道菌群的复杂性和宿主特异性，且“健康”菌群的定义尚不明确，工程菌的研究面临着极大挑战与机遇。\n靶向菌群的饮食干预，没那么简单 ① 不同菌群群落对健康的影响尚不确定：以短链脂肪酸（SCFA）为例，虽然膳食介导菌群增加SCFA产生，但是其与菌群及宿主的复杂相互作用并不清楚；② 菌群或代谢物除了受食物中宏量营养素影响外，还受其他成分、加工方式等影响，且其对健康的影响程度未知；③ 目前，有两种方式可以利用菌群数据：生物标志物的发现和靶向菌群的筛选，但是其应用也要结合其他方面的研究数据；④ 鉴于特定膳食难以长期依附，以菌群为靶点的药物应是未来研究方向。\n","date":1649808000,"expirydate":-62135596800,"kind":"page","lang":"zh","lastmod":1649808000,"objectID":"d7af18e9d908b789f03558cc43a26c3e","permalink":"https://jianzhnie.github.io/post/%E5%BE%AE%E7%94%9F%E7%89%A9/","publishdate":"2022-04-13T00:00:00Z","relpermalink":"/post/%E5%BE%AE%E7%94%9F%E7%89%A9/","section":"post","summary":"肠道菌群，作为寄居在人体肠道内微生物群落的总称，是近年来微生","tags":["微生物"],"title":"微生物知识基础","type":"post"},{"authors":["Robin"],"categories":null,"content":" 当我们一边走路一边纪念\n但一不小心\n又把一天走成一年\n陪时光荡秋千\n每受一次伤学一点\n很久以后\n再去怀念\n让我们一边寻觅一边亏欠\n拿起初的心\n再把一天走成一年\n2020 岁岁年年 上面的歌词来自于孙燕姿的《天天年年》，歌词写得其实就是人生，有一天发现自己不再年轻，也终于活成了小时候期待的样子，理智，成熟。可是不快乐，最怀念的还是当初那个勇敢去爱，去闯，无忧无虑的少年。当我一年年长大，上学、恋爱、工作，直到有一天，发现他的梦越来越少了。\n歌唱着时光的逝去，一晃，到了2020年的大年三十，在这极为特殊的一年，我想应该为过去的一年留下些什么。于是我打算给自己写个年终总结。\n2020年初，武汉爆发疫情，作为距离武汉不足两百公里的边陲小城，从武汉返程的大学生、打工人有数万人之多，因此我们也理所当然成为重风险地区被封城了。由于不能返程，这竟成为我近六年来在家度过的最长的一个假期，不知是福还是祸。\n封城令直到三月初才开始陆续放行，返回深圳之后，除了每天往返公司和家，几乎没去过其他地方。在家隔离的日子仿佛扭曲了时间，刚开始的那段时间，我会每天晚上做好饭，然后第二天带到公司用微波炉加热。坚持了不到一个月之后便放弃了，一方面是觉得太过麻烦，另一方面感觉冷藏之后再次加热的食物吃起来没了味道。但是，每天的早餐我还是坚持自己在家吃，那段时间，我还经常给每天的食物拍照，偶尔发发朋友圈，算是很有趣的记录，后来拍照记录也被我放弃了，因为我发现手机里除了食物几乎没有别的。这一年仿佛过得非常快，但是似乎又很慢— — 各种大事件一件接着一件，每天更新的新冠死亡人数以万记，好像到了世界末日。\n一晃到了年底，原本不打算回家过年，打电话问我爸、我弟，都说过年不回去。最后，年夜饭桌上，我们全家人还是团团圆圆地坐在一起。或许是觉得过年家里只有我妈一个人太过冷清，于是乎，我们还是不约而同地选择了回家。\n正如现在，我终于腾出手来开始写年终总结，于是乎开始在脑海里搜索2020一整年的 Spark.\n工作： 对于我来说，2020年最大的收获应该是来自工作。\n年初疫情严重的时候，困居在家不能返程，公司给我办理了入职手续，安排我在家远程办公。刚刚入职，又是远程办公，和同事们都没见过面，但是小伙伴都非常积极主动的帮我解决问题，我很快融入了集体。也是因为远程办公的原因，工作效率上和现场办公差了不少，而且由于家里太冷，我通常是坐在被窝里面办公，这样在没有办公室、会议室、食堂这些基本活动之后，我基本上是一整天坐在电脑前了，疲劳程度远远大于在公司办公。而且由于和美国老板们的时间差，我们上班的时间也提前了。工作的第二周，我们每天的例会提前到早上8点，这样，我的办公时间就从早上8点一直持续到晚上11点，疲劳程度可想而知。\n三月返深之后，开始回到 office 工作，终于见到了团队小伙伴，工作各方面也步入正轨。部门领导给了我的工作极大的自由度，这让我有时间按照自己方式规划整个流程并以很高的效率完成每一项任务。与此同时，为了保持工作状态，上班时间我都是尽量把工作做完，然后早点回家，有时回家做个简餐，但更多时候回家锻炼身体。\n整个2020年，虽说没有花太多时间读论文，研究新的算法，但是掌握了很多提升工作效率的工具，也算是收获满满。\n生活： 2020年疫情给我的生活带来的影响是巨大的。虽然我知道自己还算蛮宅得住的，但是也对自己的宅能力有了新的认识。虽然说宅起来心里上并没有太大的不适，主要是焦虑感，在每个周末结束的时候，我总会在心里责怪自己自控力太差，周末的时间都被我刷剧、看无聊视频给浪费掉了，不如花在锻炼身体和做其他更有意义的事情。\n今年睡眠方面有了很大改善，一个原因是我经常在下班之后去健身房或者在家锻炼一会儿，这样在我入睡之前身体已经很疲劳了，另一个是我一直保持的习惯：在睡觉前把手机调整为飞行模式并放在距离床很远的位置，这样减少了蓝光的接触。当然偶尔也会有失眠的时候，我发现失眠往往是由于最近一段时间工作太累，白天过于焦虑引起的。每当进入这个状态，我就会在第二天及时调整，尽量早点下班回家锻炼。另外，我发现中午半个小时的午休时间，我几乎是趴到抱枕上立马就能睡着，如果晚上入睡也能每次都这么顺利就好了。此外，我发现让我失眠的另一个因素是喝咖啡，不论是上午还是下午，只要我一喝咖啡，晚上必失眠，而且是重度失眠，因此我就把咖啡戒掉了。\n疫情期间，很多小伙伴都开始变身大厨，公司有很多同事常年坚持自己带饭，有时候看到他们带过来的精致的饭菜，总是羡慕不已。我平日里很少做饭带到公司，不过周末的时候还是很乐意自己折腾一下。虽是经常做饭，也都是平日里常见的家常小菜，厨艺并没有太大提高，只是整个流程越来越得心应手。周末做饭的时候也会经常叫上室友老崔，老崔的厨艺比我好，老崔做菜的时候，我一般都在旁边给他打下手。自己在家做饭的一个直接后果就是容易吃胖，所以到下半年，体重直增加到接近 70 公斤，比我刚刚毕业那会儿足足胖了20斤，所以下一年还需要给自己立一个减肥的 Flag.\n5月末，S 说心情不好，一路从北到南到深圳来想要放松一下心情，我和 W 一起安慰她。她提到去年年底换了工作之后一直感觉压力巨大，而且和组长之间的关系也不是很好，现在已经有了轻度抑郁。我和 W 听完她的遭遇后都建议她回去之后换一份工作，换一个环境。后来，S 回到帝都开始寻求解决方案，各种尝试后终究还是辞了职，到年末终于找到了一份自己喜欢的工作，生活步入正轨。S 的事情给我挺大触动，因为我有时也会心情抑郁，情绪低落，不想说话，不愿意和外界沟通。S 回去之后，我也开始反思自己的状态，学习主动控制自己的心情，一旦当发现心情不好、情绪低落的时候立马作出调整，我发现这是一个不错的方法，整个下半年的负面情绪少了很多。\n年末时候，偶然发现胳膊上似乎有一个小肿块，突然间想起来后背上也有类似的一个，不禁打了一个寒颤，急忙去各个平台上查到底是什么。搜索出来的回答总是吓人的，我一度怀疑是肿瘤（这个现象是肿瘤发生了转移），于是那两天开始寝食难安，打算去医院的肿瘤科做一次检查。检查的前一天晚上，脑海里浮想联翩，想象着如果真的是肿瘤我该怎么办，是作为一名癌症斗士，勇敢的和病魔斗争；还是抓紧时间实现未完成的心愿，独自一人去旅游。第二天的检查很顺利，主治医生和彩超室的医生一致诊断说那个是脂肪瘤。或许是当时我的焦虑和恐惧都写在了脸上，主治医生开始安慰我，说这不是病，让我不要有任何担心，该吃吃，该喝喝。这件事儿过后，我竟有种从鬼门关里走过一回的感觉，如释重负，心情也愉悦了很多。\n读书： 算下来，今年只读了10来本书，比去年和前年少了不少。今年读的一些书除了小说之外，还有涉及社会学、经济学、人物传记等。下面的书我挑了一些整理了书评：\n枪炮、病菌与钢铁 — [美] 贾雷德·戴蒙德 著，谢延光 译， 上海译文出版社 这是本书最早是在看《晓松奇谈》的时候高晓松老师推荐的。虽然高老师作为公知在2020年的直播节目中翻车被骂下神坛，但是这本书确是一本好书。作者戴蒙德是一位生物学家、人类学家，他以独特视角揭示了人类社会发展史。作者在书的开头提出很多非常有意思的发现并在后文中一一解答，例如：作为什么欧亚文明比世界其他文明更加先进？为什么小麦和玉米、牛和猪以及现代世界的其他一些“了不起的”作物和牲畜出现在这些特定地区，而不是出现在其他地区？以及来自欧洲的几百人 的队伍可以战胜美洲上千万人口的国家。\n房思琪的初恋乐园 — 林奕含 著 北京联合出版公司 这本书描写的是一位初高中少女被老师诱奸和性侵的故事。书中的语言描写虽然并不黑暗，也没有任何正面强暴的情节，但在看书的整个过程中那种压抑和无助感铺面而来，压得人透不过气，最终我没能读完这本书。\n实际上，这本书是根据真实故事改编而成。作者林奕含是1991年生的女生，父亲是台湾一名著名的医生。高中时林奕含被补习班老师性侵，自此患上了抑郁症，后来她将自己的故事改编成小说，2017年于家中自杀，2018年小说发表。林奕含是一位读书极多，极有才华的作家，她将自己的经历用细致，极美的文学语言表达出来。她曾说：如果你阅读时感受到痛苦，那是真实的，如果你阅读时感受到美，那也是真实的。\n未穿的红嫁衣 霍达 著 ​ 这本书没有留下太多印象，我是在看完作者的另外一本《穆斯林的葬礼》之后找来的。\n毛泽东传 — [英] 迪克·威尔逊（[Dick Wilson](https://book.jd.com/writer/Dick Wilson_1.html)） 著，中共中央文献研究室 译 这本书的作者是一位美国人，他以相对客观的记事态度为毛主席作传，可以帮助我们重新认识、理解和评价毛泽东。\n邓小平时代 — 傅高义著 新知三联书店 2020年看这本书似乎有一种特殊的意义，2020年中国政府在抗击肺炎疫情中的出色表现以及所有西方的国家的拉胯相比，几乎所有中国人的名族自信心都得到了空前提升，不仅名族自信心、名族自豪感得到提升，中国人的生活水平和之前相比不知好了多少倍。这一切都和一位老人有关— 邓小平，从某种意义上来说，我们现在仍处在邓小平时代，在改革开放40年之际重新翻开这本书对于我们理解中国的经济发展和未来发展方向有及其重要的意义。\n丰乳肥臀 — 莫言 莫言老师献给自的的母亲，也是献给天下母亲的伟大作品。莫言老师的作品某种程度上受到了马尔克斯的影响，书中有很多情节运用了魔幻现实主义的写法。整部作品跨越了民国、日本侵略、抗战、新中国、改革开发近百年的历史进程，深刻刻画了对于生命苦难的记忆。\n白夜行 东野圭吾老师最好的一部嫌疑推理小说，没有之一。\n浮生六记 整本书篇幅很短，非常有趣，尤其是书中写和芸娘的章节，非常欢快可爱。\n飘 — [美国] 玛格丽特·米切尔 著，李美华 译 很早之前看过由这本书改编的电影《乱世佳人》，2020年终于有时间找到原著来看，书中对于女主—斯嘉丽的在遭遇跌宕起伏的人生经历之后性格变化和人物成长描写非常深刻。\n繁花 — 金宇澄 著 这是一本正在看的书，我是看的网上的推荐过来的，整本书以上海话来书写，却又非常容易理解，在阅读时总想象着上海人对话的方式和语气。我读《繁花》，读懂它的部分我觉得像《红楼梦》，没有读懂它的那部分我觉得就是《金瓶梅》。\n八次危机 温铁军 等 著 温老师是三农问题的专家学者， 读/听温老的书让人有一种醍醐灌顶的感觉。《八次危机》从中国经济史的角度深刻剖析了从1949年新中国建立到2008年经历危机，中国所经历的8次成规模的经济危机以及中国走出危机的办法。\n告别百年激进 温铁军 等 著 这本书是由温老师的演讲整理而成，可以在B 站找到演讲视频，觉得看书枯燥的可以结合老师的演讲来看。\n四世同堂 美国陷阱 认识电影 观影： 自从大学之后，看电影成为一种日常生活习惯，每次感觉有压力想要放松心情的时候总会看上一部电影。今年算上在线、影院和影评节目节目里看的电影，差不多有50多部，这个目标基本达成。下面是2020年观影列表，以后有时间我再单独整理出一份影评。\n无间道 (1,2) 两杆大烟枪 1917 幸福的拉扎罗 超脱 爆裂鼓手 三块广告牌 勇士 桃姐 为奴12年 我们的幸福时光 幸运是我 双旗镇刀客 老男孩 金氏漂流记 激战 翻滚吧阿信 小鞋子 独自等待 天若有情 大话西游（1，2） 假如爱有天意 我脑中的橡皮擦 狼少年 送你一朵小红花 心灵奇旅 拆弹专家2 紧急救援 疯狂原始人 一秒钟 除暴 风平浪静 金刚川 源代码 钢琴家 楢山节考 社交网络 甜蜜蜜 狩猎 热天午后 牯岭街少年杀人事件 第六感 冲锋队之怒火街头 爆裂鼓手 绿里奇迹 恐怖直播 喜宴 七武士 空房间 勇敢的心 初恋这件小事 赛德克·巴莱 那山那人那狗 放牛班的春天 到阜阳六百里 行走距离 蓝色大门 以女儿之名 电话 天堂电影院 看不见的客人 站台 伴我同行 除了电影，2020年还看了几部高质量的电视剧，其中三部是由紫金城的小说改编而成，分别是《隐秘的角落》、《沉默的真像》和《无证之罪》。另外两部来自于正午阳光出品的《大江大河》和《山海情》。\n新年计划 2020年虽说没有定目标，但是整体感觉完成还是 …","date":1581379200,"expirydate":-62135596800,"kind":"page","lang":"zh","lastmod":1581379200,"objectID":"ba9c24cbc30a6e387eda5e29816123e0","permalink":"https://jianzhnie.github.io/post/2020-%E5%B2%81%E5%B2%81%E5%B9%B4%E5%B9%B4/","publishdate":"2020-02-11T00:00:00Z","relpermalink":"/post/2020-%E5%B2%81%E5%B2%81%E5%B9%B4%E5%B9%B4/","section":"post","summary":"当我们一边走路一边纪念 但一不小心 又把一天走成一年 陪时光荡秋千","tags":["生活","随笔"],"title":"2020 岁岁年年","type":"post"},{"authors":["Robin"],"categories":null,"content":"童年的渴望 关于渴望这个话题，我想写它已经有好一阵子了。这里的渴望没有毛阿敏的《渴望》那么高端，只是我成长过程中的一些幼稚的渴望罢了。其实内心一直都有写作和表达自己的想法，也零零碎碎想过一些，但每当我把它写出来的时候总是感觉十分不满意。第一次明确想要表达这个话题是在今年一月份的时候看到益辉师兄关于童年生活的博客，而第一次隐约考虑这个话题大概是在大学期间读路遥的小说《平凡的世界》，里面主人公的成长的经历对于我有着极强的代入感。至于这次所写的内容，都是我小时候亲身经历过的，希望童年的乐趣能够弥补写作技巧上的不足。我写这篇回忆杀，一方面是想对比一下自身现今和过去的渴望；另一方面，随着年龄的增大，有些关于儿时的记忆也渐渐模糊，希望能够把它记录下来。我总觉得现在的渴望太廉价——这些渴望被人为的、快速制造，随即又会被人为、快速满足，比如点赞和网购。而我从小到大渴望的东西很多，而且多数最终都没能满足，但是现在想来，这些无法满足的渴望也成为了生活的部分意义。\n小时候，没有电子设备占据时间，我就会整日里在村子里游荡，从这个田窜到那个田，从这个山跑到另一个山。没有玩具，我们就自己做，比如跳皮筋、叠飞机、做弓箭、弹弓、造飞轮、回风旋。没有零食，我们去山上自己摘，春天摘矛莓，樱桃，夏天摘杏子、李子、野葡萄，山楂，猕猴桃；秋天有柿子、板栗、八月炸； 冬天还有寒莓、拐枣。\n讲故事 我的童年几乎没看过什么童话书和故事书，唯一有印象的是在二叔家看到几本西游记和葫芦娃的故事书，如获至宝，那个下午便蹲在那里一口气看完了，后来去的时候又翻了好几遍。童年最有意思的事情就是听大人们讲故事，虽然那些关于水鬼、迷路神的故事现在听起来很荒谬，但在当时确是津津有味，极大地勾起了我们的好奇心。我还记得经常围着火炉子让妈妈给我讲故事， 妈妈讲得故事非常有趣又很有道理。后来上了学，我就把这些故事讲给班里的同学们们听，同学们都非常感兴趣。一到下课，大家都围到我的座位上来。后来，班主任在班里举办了一次故事会，每个人都走上讲台把自己的故事讲给全班人听。然后，我就把我妈妈给我讲得故事在台上讲了出来，那个故事需要用方言讲才好听，我上台之后或许因为紧张，就是在方言和普通话之间切换不过来，然后自己在讲故事的过程中又忍不住笑场，把同学们也逗得哈哈大笑。最终，老师还对我的故事做了点评，把讲故事的第一名颁给了我，于是，然后我就成为了班里公认的故事大王。\n花草 我家门前有一块空地，那是我小时候种花种菜的地方。最早的时候，每次我妈妈在那块地里干活，我就在旁边看着，问各种小孩子都会问的问题。我看到妈妈把蔬菜种子埋进去，过不多久就会长出嫩嫩的芽来，我就会忍不住总是过来浇水，看着那些苗儿一天天长高，心里别提多高兴了，到了结果实的时候更是兴奋的不得了。从妈妈那里学到了种东西的经验，到了后来，我便要来了那块地的控制权。春天来的时候，开始松土施肥，然后我从我妈那里找来了丝瓜、葫芦种子分别种下去（这两样都是我最爱吃的），覆土盖好。然后每天放学总会跑过去蹲在那看他们长了没有，浇水，除草，看他们一天天长高，等到丝瓜和葫芦开始吐丝生蔓的时候，我又跑到山上去捡来竹子、树枝来给它们搭好架子。然后到夏天的时候，那些丝瓜、葫芦就顺着搭好的架子长得铺天盖地，一个夏天吃了不少美味的葫芦炖腊肉和丝瓜汤。那几年的夏天，经常也可以吃到自己种的西红柿，那是我们当地的品种，和大拇指差不多大小，吃起来酸酸的，又有一股味精的味道，简直就是人间美味。\n除了种菜，当然我还种花草，望春花，芍药花、栀子花，山茶花，茉莉花，野百合，大菊、小菊，麦冬草，金钱草……那几年，我家的院子就像是一个小花园，有很多花我是从山上挖回来移栽到院子里的，还有一些是问别人要的种子种下去的，就这样，一年四季，院子里都会有花的香味。那个时候，做完家务活之后我最大的乐趣就是照看这些花草，浇水、翻土、剪枝，打岔，就像是幸福的园丁。\n再后来，搬家了，那些花花草草带不走，没人照顾，好多都枯萎了。过了好些年，我过年回了趟老家，欣喜地发现那些麦冬草和金钱草竟然都还活着，麦冬草长的很茂盛，而且发展成大片大片的。我欣慰极了，于是乎又找来锄头给他们翻起土来。\n又过了几年，我毕业来到城市工作，和陌生人合租住在一个闭塞的小物子里，又想起小时候的那个小花园，心中依旧念念不忘。不知道何时自己能买得起房子，在房子旁边再开辟一块土地来种上花草，然后把这些教给自己的娃。\n电视机 和我的同龄人一样，我小时候有极大的电视瘾，主要是爱动画片和古装武侠片。小时候大部分时间都是在别人家蹭电视，直到2000年过年的时候我家才有了第一台电视机。因为蹭电视无法保证连续性，所以有些片子缺头、缺尾或隔三差五缺一集。因此有些错过的电视情节，我是纯粹靠别的同学讲来听然后自己脑补回来。当时我们那个小孩子似乎都练就了这样的功夫，头一天看完了电视剧第二天讲给没看过的小伙伴听，而且讲得有声有色，遗漏的情节大家互相补充，竟把一个情节讲得十分完整，其他的小孩子也都听得津津有味。\n上小学的时候，一到放学都会拼命跑回家，第一时间写完作业，然后守候着电视机看六点左右播出的动画片。动画片中我最喜欢的就是《啄木鸟》和《猫和老鼠》了，当时是中央一台的大风车里播出，那只笑声魔性的逐木鸟一出场，咯咯咯 咯咯 咯咯咯 咯咯 咯咯咯咯咯，我就被逗得哈哈大笑。还有汤姆和杰瑞那一对冤家，动画片里的那只猫永远斗不过老鼠，虽然这些动画片每集只有几分钟，真的是百看不厌。后来又看了《奥特曼》，除了奥特曼动画片，当时还流行集奥特曼和怪兽卡片，卡片背面是超能力的介绍。因此对于每个奥特曼甚至每个怪兽的名字和其特点，我们都记得滚瓜烂熟，这个也成了我们那个年纪的小孩在一块玩所特有的语言。除了奥特曼，我当时还看了《铁甲小宝》，但是没有看完，只记住了小宝和人类小伙伴去寻找和平星拯救人类的故事。《犬夜叉》也是，只在别人家里看了一两集，后来在学校里听同学讲补充了一些情节，最后就一直没有机会看，总之念念不忘。当然国内的动画片也看了一些，比如《蓝猫淘气三千问》，这个动画片就是一个科普节目，当时看起来还是蛮有趣的，学到了很多科普知识，后来我弟也是超喜欢这个动画片，看完了经常讲给我妈听。\n除了动画片，武侠片也看了一箩筐，印象最深的还是《天龙八部》，当然是黄日华、陈浩明那版。虽然忘记了这部电视剧是在谁家看的，也是陆陆续续的没有看完，不过这个片子好多情节都印在脑海中，比如段誉在山洞意外学得凌波微步，就像自己意外获得绝世武功一样高兴；乔峰每次出场都霸气十足，使出降龙十八掌时的配乐和特效简直碉堡了，在聚贤庄与各大门派决战，后来一人击退十万大军都看得人热血沸腾；乔峰、段誉、虚竹三人结拜痛饮，便觉得豪气冲天；最后，痴情的段誉终于赢得王姑娘的芳心，我竟比他还高兴。还有古天乐李若彤版的《神雕侠侣》在我内心也是无法超越的，古天乐那个时候还是白白净净的，真是帅呆了，李若彤饰演的小龙女真的就跟仙女下凡一样。后来看到尹志平和小龙女那集，我和小伙伴都气的牙痒痒，我甚至想要钻到电视里把他揪出来暴打一顿。家里买电视机的那年，《还珠格格》开始火遍大江南北，这部电视剧应该是第一部我完完整整看完的电视剧，而且不止一遍，从第一部一直追到第二部，再到后来原班人马演的的《情深深雨濛濛》。《还珠格格》电视剧热播那两年，我们那些小孩子都学会了哼唱电视剧里面的主题曲，“你是风儿，我是沙，缠缠绵绵到天涯…” ，然后一路哼唱着去上学，然后再唱着歌儿回家。还有李亚鹏许晴那一版《笑傲江湖》同样堪称经典。记得当时是在下午午间新闻结束之后才开始播，每天两集，不巧的是当时正在上学，下午两点多就要上课。我家正好在离学校比较近的村口，因此吃过午饭，一群上学的孩子都跑到我家来看电视剧，看完第一集就一点多了，胆子小的孩子就跑去上学去了，我们有几个胆子比较大的继续等着看第二集。如果第二集看完就两点半了，因此第二集只看一半，我们就得飞奔跑去学校，就这样把整部剧看完了。当然有很多遗漏的情节，只能等到重播的时候再看一遍。记得有一年去姥姥家过暑假，姥姥家没有电视，就去邻居家看，当时有一部《小李飞刀》，零星的看了几集，觉得小李飞刀甩刀的那种潇洒也很符合我的胃口，后来不知因为什么原因没能接着看。有一阵子，电视信号不太好，荧屏上有很多的麻点，我不知从哪里学来的经验：一定是天线被风吹歪了。于是乎就蹭蹭蹭跑向楼顶，抱着那根电视天线杆，向左转再向右转，然后我弟在下面看电视画面有没有好起来，转天线杆偶尔有用，但很多时候只好将就着看。\n看完那些武侠片，一群孩子上学路上最喜欢讨论的就是电视剧中哪种武功最厉害，但是争论总是没有止境的，除了争论这个，我们还经常模仿那些绝世武功，比如降龙十八掌、六脉神剑，吸星大法，乾坤大挪移等等。无论是动画片还是武侠片，都极大的勾起了童年的好奇心和想象力。现实世界，我们不可能腾云驾雾，给我一根棍子我用吃奶的力气也蹦不了两米，所以那个虚拟的飞檐走避的世界格外吸引人。动画片和武侠剧我大概还知道是假的，但当年还播了一部神剧叫《排球女将》，这对我来说就有些难辨真假了；主角小鹿纯子那跳起几米高的必杀技让我们无比羡慕和崇拜，我被这片子吸引得入了迷。直到若干年后，我自己学会了打排球，还想着苦练旋转日月和晴空霹雳的招数。相信那些小时候看过《灌篮高手》的孩子同样也会对樱木花道的球技痴迷，为之疯狂，喜欢上篮球。\n现在很多人都说现在的电视剧没有小时候的好看了，我想：小时候的这些着迷和如今让我们着迷的事物对比起来，有两个显著的区别。一是小时候的迷恋是有尽头的：剧播完了，也就完了。二是无论你如何着迷和渴望，你都无法对抗一些物理条件，比如停电或电视坏掉，一天只有一集，错过就错过了。如今的剧，最大的特点就是可以无限看；优酷土豆爱奇艺，任何一家视频网站，只要你打开，你就可以娱乐至死，没有数量限制，没有频率限制，没有电源限制，没有硬件限制。还有一个可能因人而异的区别，就是我小时候的迷恋会影响我的物理生活，比如我会自制刀剑、弓箭、飞镖或打狗棒，或爬树、上房（我能活到今天也算是个奇迹）。\n方便面 农村人一天三顿并没有什么区别，早中晚都是大米饭就菜。不像城里人，早饭是一顿特殊的饭（多为面食），小时候上街看到早餐摊卖油条、煎饺总馋的不得了。我上小学时候有些同学的家长不愿大清早起来做饭，就给孩子买几箱方便面，早上起来泡个面了事或者直接带一袋干吃面路上吃。我的早餐基本都是自己解决，尤其是在冬季的时候，早上起来做一份炒饭当早餐，或咸菜炒饭，或蛋炒饭。我很羡慕有方便面吃的同学，只记得当时有两种牌子的方便面：北京方便面和南街村方便面，都是麻辣口味。大家吃方便面话会攒下一些调料包，放学路上把那些粉末倒在手里，然后几个人围一块儿用食指蘸着舔着吃。我家其实偶尔也会买方便面，妈妈叫我早餐煮着吃，所以我的早饭总是炒饭和煮面穿插着，所以也会偷偷存着调料包。那麻辣味道的调料确实是又麻又辣，有时候我嫌干吃太辣，就把调料包到在杯子里然后用开水冲着喝，也很解馋。这种对方便面的馋从小学延续到了初中。上初中时，住校的学生通常是一个班住一个宿舍，每天下了晚自习，其实肚子就有些饿了，宿舍总会有同学拿着方便面在床上摸着黑干嚼，有时候关系好的同学也分我一块。到了高中之后基本没怎么住校，生活条件也渐渐好了，早中晚基本在家吃，对于方便面就没有那么渴望了。\n柿子 再来说水果。小时候上街赶集，闻着街上的苹果香蕉味馋得不行，但几乎没机会吃到。我印象里比较深刻的一次是我爸从外面打工回来，带回家几斤提子，那是我第一次见到这种水果，细长的椭球的形状，皮是绿绿的，像玛瑙一样。我当时还以为是葡萄，但是吃起来又无核而且比葡萄甜了好几倍，那是当时我吃过最好吃的水果，至今记忆尤新。 每年秋收之后，就会有水果贩子将北方的苹果大车大车的运到村子里来卖，可以拿钱买也可以拿粮食换，差不多两斤谷子换一斤苹果，当时农村人都很穷，很少有人花钱买，但是刚刚秋收完，每家都有很多粮食，于是大家就都愿意扛着一袋谷子去换苹果。于是乎，水果贩子才走完几个村子，满满一车的苹果就变成了一大车粮食。\n过年时有些亲戚家会买甘蔗，我家也会买，这货让人又爱又恨，因为它很甜，但吃起来实在费牙，啃得牙龈出血 …","date":1554710483,"expirydate":-62135596800,"kind":"page","lang":"zh","lastmod":1554710483,"objectID":"cef9a7d8270ae18dca71ccd1fc2f12a8","permalink":"https://jianzhnie.github.io/post/%E9%9A%8F%E7%AC%94/","publishdate":"2019-04-08T16:01:23+08:00","relpermalink":"/post/%E9%9A%8F%E7%AC%94/","section":"post","summary":"童年的渴望 关于渴望这个话题，我想写它已经有好一阵子了。这里的","tags":["生活","随笔"],"title":"童年的渴望","type":"post"},{"authors":["Robin"],"categories":null,"content":" Create your slides in Markdown - click the Slides button to check out the example. Supplementary notes can be added here, including code, math, and images.\n","date":1554595200,"expirydate":-62135596800,"kind":"page","lang":"zh","lastmod":1554595200,"objectID":"557dc08fd4b672a0c08e0a8cf0c9ff7d","permalink":"https://jianzhnie.github.io/publication/preprint/","publishdate":"2017-01-01T00:00:00Z","relpermalink":"/publication/preprint/","section":"publication","summary":"Lorem ipsum dolor sit amet, consectetur adipiscing elit. Duis posuere tellus ac convallis placerat. Proin tincidunt magna sed ex sollicitudin condimentum.","tags":["Source Themes"],"title":"An example preprint / working paper","type":"publication"},{"authors":[],"categories":[],"content":"Create slides in Markdown with Wowchemy Wowchemy | Documentation\nFeatures Efficiently write slides in Markdown 3-in-1: Create, Present, and Publish your slides Supports speaker notes Mobile friendly slides Controls Next: Right Arrow or Space Previous: Left Arrow Start: Home Finish: End Overview: Esc Speaker notes: S Fullscreen: F Zoom: Alt + Click PDF Export Code Highlighting Inline code: variable\nCode block:\nporridge = \u0026#34;blueberry\u0026#34; if porridge == \u0026#34;blueberry\u0026#34;: print(\u0026#34;Eating...\u0026#34;) Math In-line math: $x + y = z$\nBlock math:\n$$ f\\left( x \\right) = ;\\frac{{2\\left( {x + 4} \\right)\\left( {x - 4} \\right)}}{{\\left( {x + 4} \\right)\\left( {x + 1} \\right)}} $$\nFragments Make content appear incrementally\n{{% fragment %}} One {{% /fragment %}} {{% fragment %}} **Two** {{% /fragment %}} {{% fragment %}} Three {{% /fragment %}} Press Space to play!\nOne Two Three A fragment can accept two optional parameters:\nclass: use a custom style (requires definition in custom CSS) weight: sets the order in which a fragment appears Speaker Notes Add speaker notes to your presentation\n{{% speaker_note %}} - Only the speaker can read these notes - Press `S` key to view {{% /speaker_note %}} Press the S key to view the speaker notes!\nOnly the speaker can read these notes Press S key to view Themes black: Black background, white text, blue links (default) white: White background, black text, blue links league: Gray background, white text, blue links beige: Beige background, dark text, brown links sky: Blue background, thin dark text, blue links night: Black background, thick white text, orange links serif: Cappuccino background, gray text, brown links simple: White background, black text, blue links solarized: Cream-colored background, dark green text, blue links Custom Slide Customize the slide style and background\n{{\u0026lt; slide background-image=\u0026#34;/media/boards.jpg\u0026#34; \u0026gt;}} {{\u0026lt; slide background-color=\u0026#34;#0000FF\u0026#34; \u0026gt;}} {{\u0026lt; slide class=\u0026#34;my-style\u0026#34; \u0026gt;}} Custom CSS Example Let’s make headers navy colored.\nCreate assets/css/reveal_custom.css with:\n.reveal section h1, .reveal section h2, .reveal section h3 { color: navy; } Questions? Ask\nDocumentation\n","date":1549324800,"expirydate":-62135596800,"kind":"page","lang":"zh","lastmod":1549324800,"objectID":"0e6de1a61aa83269ff13324f3167c1a9","permalink":"https://jianzhnie.github.io/slides/example/","publishdate":"2019-02-05T00:00:00Z","relpermalink":"/slides/example/","section":"slides","summary":"An introduction to using Wowchemy's Slides feature.","tags":[],"title":"Slides","type":"slides"},{"authors":null,"categories":null,"content":"Lorem ipsum dolor sit amet, consectetur adipiscing elit. Duis posuere tellus ac convallis placerat. Proin tincidunt magna sed ex sollicitudin condimentum. Sed ac faucibus dolor, scelerisque sollicitudin nisi. Cras purus urna, suscipit quis sapien eu, pulvinar tempor diam. Quisque risus orci, mollis id ante sit amet, gravida egestas nisl. Sed ac tempus magna. Proin in dui enim. Donec condimentum, sem id dapibus fringilla, tellus enim condimentum arcu, nec volutpat est felis vel metus. Vestibulum sit amet erat at nulla eleifend gravida.\nNullam vel molestie justo. Curabitur vitae efficitur leo. In hac habitasse platea dictumst. Sed pulvinar mauris dui, eget varius purus congue ac. Nulla euismod, lorem vel elementum dapibus, nunc justo porta mi, sed tempus est est vel tellus. Nam et enim eleifend, laoreet sem sit amet, elementum sem. Morbi ut leo congue, maximus velit ut, finibus arcu. In et libero cursus, rutrum risus non, molestie leo. Nullam congue quam et volutpat malesuada. Sed risus tortor, pulvinar et dictum nec, sodales non mi. Phasellus lacinia commodo laoreet. Nam mollis, erat in feugiat consectetur, purus eros egestas tellus, in auctor urna odio at nibh. Mauris imperdiet nisi ac magna convallis, at rhoncus ligula cursus.\nCras aliquam rhoncus ipsum, in hendrerit nunc mattis vitae. Duis vitae efficitur metus, ac tempus leo. Cras nec fringilla lacus. Quisque sit amet risus at ipsum pharetra commodo. Sed aliquam mauris at consequat eleifend. Praesent porta, augue sed viverra bibendum, neque ante euismod ante, in vehicula justo lorem ac eros. Suspendisse augue libero, venenatis eget tincidunt ut, malesuada at lorem. Donec vitae bibendum arcu. Aenean maximus nulla non pretium iaculis. Quisque imperdiet, nulla in pulvinar aliquet, velit quam ultrices quam, sit amet fringilla leo sem vel nunc. Mauris in lacinia lacus.\nSuspendisse a tincidunt lacus. Curabitur at urna sagittis, dictum ante sit amet, euismod magna. Sed rutrum massa id tortor commodo, vitae elementum turpis tempus. Lorem ipsum dolor sit amet, consectetur adipiscing elit. Aenean purus turpis, venenatis a ullamcorper nec, tincidunt et massa. Integer posuere quam rutrum arcu vehicula imperdiet. Mauris ullamcorper quam vitae purus congue, quis euismod magna eleifend. Vestibulum semper vel augue eget tincidunt. Fusce eget justo sodales, dapibus odio eu, ultrices lorem. Duis condimentum lorem id eros commodo, in facilisis mauris scelerisque. Morbi sed auctor leo. Nullam volutpat a lacus quis pharetra. Nulla congue rutrum magna a ornare.\nAliquam in turpis accumsan, malesuada nibh ut, hendrerit justo. Cum sociis natoque penatibus et magnis dis parturient montes, nascetur ridiculus mus. Quisque sed erat nec justo posuere suscipit. Donec ut efficitur arcu, in malesuada neque. Nunc dignissim nisl massa, id vulputate nunc pretium nec. Quisque eget urna in risus suscipit ultricies. Pellentesque odio odio, tincidunt in eleifend sed, posuere a diam. Nam gravida nisl convallis semper elementum. Morbi vitae felis faucibus, vulputate orci placerat, aliquet nisi. Aliquam erat volutpat. Maecenas sagittis pulvinar purus, sed porta quam laoreet at.\n","date":1461715200,"expirydate":-62135596800,"kind":"page","lang":"zh","lastmod":1461715200,"objectID":"e8f8d235e8e7f2efd912bfe865363fc3","permalink":"https://jianzhnie.github.io/project/example/","publishdate":"2016-04-27T00:00:00Z","relpermalink":"/project/example/","section":"project","summary":"An example of using the in-built project page.","tags":["Deep Learning"],"title":"Example Project","type":"project"},{"authors":null,"categories":null,"content":"","date":1461715200,"expirydate":-62135596800,"kind":"page","lang":"zh","lastmod":1461715200,"objectID":"d1311ddf745551c9e117aa4bb7e28516","permalink":"https://jianzhnie.github.io/project/external-project/","publishdate":"2016-04-27T00:00:00Z","relpermalink":"/project/external-project/","section":"project","summary":"An example of linking directly to an external project website using `external_link`.","tags":["Demo"],"title":"External Project","type":"project"},{"authors":["Robin","Robert Ford"],"categories":null,"content":" Click the Cite button above to demo the feature to enable visitors to import publication metadata into their reference management software. Create your slides in Markdown - click the Slides button to check out the example. Supplementary notes can be added here, including code, math, and images.\n","date":1441065600,"expirydate":-62135596800,"kind":"page","lang":"zh","lastmod":1441065600,"objectID":"966884cc0d8ac9e31fab966c4534e973","permalink":"https://jianzhnie.github.io/publication/journal-article/","publishdate":"2017-01-01T00:00:00Z","relpermalink":"/publication/journal-article/","section":"publication","summary":"Lorem ipsum dolor sit amet, consectetur adipiscing elit. Duis posuere tellus ac convallis placerat. Proin tincidunt magna sed ex sollicitudin condimentum.","tags":["Source Themes"],"title":"An example journal article","type":"publication"},{"authors":["Robin","Robert Ford"],"categories":null,"content":" Click the Cite button above to demo the feature to enable visitors to import publication metadata into their reference management software. Create your slides in Markdown - click the Slides button to check out the example. Supplementary notes can be added here, including code, math, and images.\n","date":1372636800,"expirydate":-62135596800,"kind":"page","lang":"zh","lastmod":1372636800,"objectID":"69425fb10d4db090cfbd46854715582c","permalink":"https://jianzhnie.github.io/publication/conference-paper/","publishdate":"2017-01-01T00:00:00Z","relpermalink":"/publication/conference-paper/","section":"publication","summary":"Lorem ipsum dolor sit amet, consectetur adipiscing elit. Duis posuere tellus ac convallis placerat. Proin tincidunt magna sed ex sollicitudin condimentum.","tags":[],"title":"An example conference paper","type":"publication"}]